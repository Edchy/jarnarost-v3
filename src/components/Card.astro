---
import { Image } from "astro:assets";

interface Props {
  body: string;
  id: string;
  href?: string;
  imageSrc: string;
  hoverBg: string;
  color?: string;
}

const { body, id, href, imageSrc, hoverBg, color } = Astro.props;
const alt =
  "This is a randomly generated image from JÃ¤rna Rosteri's image library. This library contains decorative images showing images from the local town, coffeebeans and bags, people, places, flavors, etc.";
---

<li tabindex="0" data-id={id} class:list={[id, "card-link"]}>
  <div>
    <img src={imageSrc} alt={alt} />
    {
      href !== "#" ? (
        <a href={href} target="_blank" class="x">
          <h2>{body}</h2>
          {!body && (
            <div>
              <img class="logo" src="/images/logos/logo.avif" />
            </div>
          )}
        </a>
      ) : (
        <div class="x full-height">
          {body && <h2>{body}</h2>}
          {body === "kontakt" && (
            <address>
              <a href="mailto:info@jarnarosteri.se">info</a>
              <a href="mailto:order@jarnarosteri.se">order</a>
              <a href="mailto:ekonomi@jarnarosteri.se">ekonomi</a>
              <a href="tel:0708401365">070-840 13 65</a>
            </address>
          )}
          {!body && (
            <div>
              <img
                class="logo"
                src="/images/logos/logo.avif"
                alt="company logo"
              />
            </div>
          )}
        </div>
      )
    }
  </div>
</li>

<style define:vars={{ hoverBg, color }}>
  address {
    padding-top: 2rem;
    font-family: var(--font-primary-heading);
    font-size: var(--step-1);
    width: 100%;
    text-align: center;
    display: grid;
    grid-template-columns: 1fr;
    text-transform: uppercase;
    font-style: normal;
    font-weight: bold;
    & a {
      font-family: var(--font-copy);

      &:hover {
        color: oklch(from var(--hoverBg) calc(1 - 0.4) c h);
      }
    }
  }

  .logo {
    width: max(230px, 22vw);
    padding-left: 10px;
    transition: scale 0.2s ease-in;
  }

  li {
    color: var(--color);
    overflow: clip;
    position: relative;
  }

  /* Base styles */
  .x {
    opacity: 0;
    transition: opacity 0.3s ease;
    pointer-events: none; /* Disable all pointer events by default */
  }

  img:not(.logo) {
    position: absolute;
    inset: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: opacity 0.3s ease;
  }

  /* Touch device specific styles */
  @media (hover: none) {
    li.touch-active img:not(.logo) {
      opacity: 0;
    }

    li.touch-active .x {
      opacity: 1;
      pointer-events: auto; /* Enable pointer events only when active */
    }

    /* Ensure links are never clickable when card is not active */
    li:not(.touch-active) a,
    li:not(.touch-active) .x {
      pointer-events: none !important;
    }
  }

  /* Hover device specific styles */
  @media (hover: hover) {
    li:hover img:not(.logo),
    li:focus-within img:not(.logo) {
      opacity: 0;
    }

    li:hover .x,
    li:focus-within .x {
      opacity: 1;
      pointer-events: auto;
    }
  }

  li div {
    background-color: var(--hoverBg);
    position: relative;
    height: 100%;
    z-index: 22;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  @media (min-width: 750px) {
    .image-2 div {
      background-color: var(--color-brand-2);
    }
  }

  .full-height {
    height: 100%;
  }

  .x {
    width: 100%;
    display: flex;
    flex-direction: column;
    justify-content: center;
    z-index: 10;
  }

  a:is(:any-link, :visited, :active) {
    color: currentColor;
    text-decoration: none;

    @media (min-width: 700px) {
      &:hover {
        color: oklch(from var(--hoverBg) calc(1 - 0.1) c h);
      }
    }
  }

  h2 {
    font-family: var(--font-primary-heading);
    text-align: center;
    font-size: var(--step-3);
    line-height: 1;
    word-spacing: 100vw;
    transition: color 0.2s ease;
  }

  .image-5 h2 {
    font-family: var(--font-copy);
    font-family:
      system-ui,
      -apple-system,
      BlinkMacSystemFont;
  }
</style>

<script>
  function initializeTouchHandling() {
    const cards = document.querySelectorAll(".card-link");

    cards.forEach((card) => {
      let touchStartTime: number;
      let touchStartX: number;
      let touchStartY: number;

      card.addEventListener("touchstart", (e: TouchEvent) => {
        // Don't prevent default here to allow scrolling
        touchStartTime = Date.now();
        touchStartX = e.touches[0].clientX;
        touchStartY = e.touches[0].clientY;
      });

      card.addEventListener("touchend", (e: TouchEvent) => {
        const touchEndTime = Date.now();
        const touchDuration = touchEndTime - touchStartTime;

        const touchEndX = e.changedTouches[0].clientX;
        const touchEndY = e.changedTouches[0].clientY;

        const distanceX = Math.abs(touchEndX - touchStartX);
        const distanceY = Math.abs(touchEndY - touchStartY);

        // If it's a tap (brief touch without much movement)
        if (touchDuration < 200 && distanceX < 10 && distanceY < 10) {
          const target = e.target as Element;

          // If the card is not active, prevent any link clicks
          if (!card.classList.contains("touch-active")) {
            e.preventDefault();

            // Remove active class from all other cards
            cards.forEach((otherCard) => {
              if (otherCard !== card) {
                otherCard.classList.remove("touch-active");
              }
            });

            // Activate this card
            card.classList.add("touch-active");
          }
          // If the card is already active, allow link clicks to proceed normally
        }
      });
    });

    // Close active card when touching outside
    document.addEventListener("touchstart", (e) => {
      const target = e.target as Element;
      if (!target.closest(".card-link")) {
        cards.forEach((card) => card.classList.remove("touch-active"));
      }
    });
  }

  // Initialize when the DOM is ready
  document.addEventListener("DOMContentLoaded", initializeTouchHandling);
</script>
