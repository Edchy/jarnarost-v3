---
// ShaderAnimation.astro
interface Props {
  width?: string;
  height?: string;
  imageUrl?: string;
  colorIntensity?: number;
  speed?: number;
  chaos?: number;
}

const {
  width = "300px",
  height = "300px",
  imageUrl,
  colorIntensity = 1.0,
  speed = 1.0,
  chaos = 1.0,
} = Astro.props;
---

<div
  id="shader2"
  data-image-url={imageUrl}
  data-color-intensity={colorIntensity}
  data-speed={speed}
  data-chaos={chaos}
>
</div>

<script>
  import * as THREE from "three";

  let camera, scene, renderer, clock;
  let uniforms;

  function init() {
    const container = document.getElementById("shader2");
    const rect = container.getBoundingClientRect();

    const colorIntensity = parseFloat(
      container.dataset.colorIntensity || "1.0"
    );
    const speed = parseFloat(container.dataset.speed || "1.0");
    const chaos = parseFloat(container.dataset.chaos || "1.0");
    const imageUrl = container.dataset.imageUrl;

    clock = new THREE.Clock();
    camera = new THREE.Camera();
    camera.position.z = 1;
    scene = new THREE.Scene();
    const geometry = new THREE.PlaneGeometry(2, 2);

    const textureLoader = new THREE.TextureLoader();
    const texture = textureLoader.load(imageUrl);

    uniforms = {
      u_time: { type: "f", value: 1.0 },
      u_resolution: { type: "v2", value: new THREE.Vector2() },
      u_color_intensity: { type: "f", value: colorIntensity },
      u_speed: { type: "f", value: speed },
      u_chaos: { type: "f", value: chaos },
      u_texture: { type: "t", value: texture },
    };

    const vertexShader = `
      varying vec2 vUv;
      void main() {
        gl_Position = vec4(position, 1.0);
        vUv = uv;
      }
    `;

    const fragmentShader = `
      precision highp float;
      uniform vec2 u_resolution;
      uniform float u_time;
      uniform float u_color_intensity;
      uniform float u_speed;
      uniform float u_chaos;
      uniform sampler2D u_texture;
      varying vec2 vUv;
     
      const float PI = 3.1415926535897932384626433832795;

      // Simplex 2D noise
      vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

      float snoise(vec2 v){
        const vec4 C = vec4(0.211324865405187, 0.366025403784439,
                 -0.577350269189626, 0.024390243902439);
        vec2 i  = floor(v + dot(v, C.yy) );
        vec2 x0 = v -   i + dot(i, C.xx);
        vec2 i1;
        i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
        vec4 x12 = x0.xyxy + C.xxzz;
        x12.xy -= i1;
        i = mod(i, 289.0);
        vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
        + i.x + vec3(0.0, i1.x, 1.0 ));
        vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
          dot(x12.zw,x12.zw)), 0.0);
        m = m*m ;
        m = m*m ;
        vec3 x = 2.0 * fract(p * C.www) - 1.0;
        vec3 h = abs(x) - 0.5;
        vec3 ox = floor(x + 0.5);
        vec3 a0 = x - ox;
        m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
        vec3 g;
        g.x  = a0.x  * x0.x  + h.x  * x0.y;
        g.yz = a0.yz * x12.xz + h.yz * x12.yw;
        return 130.0 * dot(m, g);
      }
      
      void distort(inout vec2 uv) {
        float time = u_time * u_speed;
        
        // Create organic flowing distortion
        float noise1 = snoise(uv + time * 0.5) * u_chaos;
        float noise2 = snoise(uv * 2.0 - time * 0.7) * u_chaos;
        
        uv.x += noise1 * 0.3;
        uv.y += noise2 * 0.3;
      }
      
      vec3 getRainbowColor(float t) {
        vec3 a = vec3(0.5, 0.5, 0.5);
        vec3 b = vec3(0.5, 0.5, 0.5);
        vec3 c = vec3(1.0, 1.0, 1.0);
        vec3 d = vec3(0.00, 0.33, 0.67);
        
        return a + b * cos(6.28318 * (c * t + d));
      }
      
      void main() {
        vec2 uv = gl_FragCoord.xy / u_resolution.xy;
        vec2 textureUV = vUv;
        
        // Apply organic distortion to texture UV
        distort(textureUV);
        
        // Sample the texture with distortion
        vec4 texColor = texture2D(u_texture, textureUV);
        
        // Create flowing colors
        float timeScale = u_time * u_speed * 0.2;
        vec2 colorUV = uv;
        distort(colorUV);
        
        vec3 rainbowColor = getRainbowColor(colorUV.x + colorUV.y + timeScale) * u_color_intensity;
        
        // Create dynamic blend factor
        float blendFactor = 0.5 + 0.5 * sin(timeScale + uv.x * 10.0 + uv.y * 8.0);
        blendFactor = smoothstep(0.2, 0.8, blendFactor);
        
        // Blend texture with rainbow colors
        vec3 finalColor = mix(
          texColor.rgb,
          rainbowColor,
          blendFactor * 0.7
        );
        
        // Add some extra "fun" touches
        float sparkle = max(0.0, sin(u_time * 3.0 + uv.x * 30.0 + uv.y * 20.0));
        sparkle *= max(0.0, sin(u_time * 2.0 + uv.y * 25.0 + uv.x * 15.0));
        sparkle = pow(sparkle, 20.0) * u_chaos;
        
        finalColor += sparkle;
        
        gl_FragColor = vec4(finalColor, 1.0);
      }
    `;

    const material = new THREE.ShaderMaterial({
      uniforms,
      vertexShader,
      fragmentShader,
    });

    const mesh = new THREE.Mesh(geometry, material);
    scene.add(mesh);
    renderer = new THREE.WebGLRenderer();
    renderer.setPixelRatio(window.devicePixelRatio);

    renderer.setSize(rect.width, rect.height);
    uniforms.u_resolution.value.x = rect.width;
    uniforms.u_resolution.value.y = rect.height;

    container.appendChild(renderer.domElement);

    const resizeObserver = new ResizeObserver((entries) => {
      for (let entry of entries) {
        const { width, height } = entry.contentRect;
        renderer.setSize(width, height);
        uniforms.u_resolution.value.x = width;
        uniforms.u_resolution.value.y = height;
      }
    });

    resizeObserver.observe(container);
  }

  function render() {
    uniforms.u_time.value = clock.getElapsedTime();
    renderer.render(scene, camera);
  }

  function animate() {
    render();
    requestAnimationFrame(animate);
  }

  document.addEventListener("astro:page-load", () => {
    init();
    animate();
  });
</script>

<style define:vars={{ width, height }}>
  #shader2 {
    width: var(--width);
    height: var(--height);
    margin: 0;
    padding: 0;
    /* cursor: pointer; */
    position: relative;
    /* grid-row: span 2; */
  }
  #shader2::before {
    content: "";
    position: absolute;
    inset: 0;
    /* background-image: url("/images/andy-wang.avif"); */
    background-color: oklch(from var(--color-4-dark) calc(1 - 0.1) c h / 0.1);
    background-blend-mode: color-burn;
  }

  #shader2 canvas {
    width: 100% !important;
    height: 100% !important;
  }
</style>
