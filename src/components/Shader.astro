---
// ShaderAnimation.astro
interface Props {
  width?: string;
  height?: string;
  colorIntensity?: number;
  speed?: number;
  rippleIntensity?: number;
}

const {
  width = "300px",
  height = "300px",
  colorIntensity = 1.0,
  speed = 1.0,
  rippleIntensity = 0.1,
} = Astro.props;
---

<div
  id="shader"
  data-color-intensity={colorIntensity}
  data-speed={speed}
  data-ripple-intensity={rippleIntensity}
>
</div>

<script>
  import * as THREE from "three";

  let camera, scene, renderer, clock;
  let uniforms;

  document.addEventListener("astro:page-load", () => {
    function init() {
      const container = document.getElementById("shader");
      const rect = container.getBoundingClientRect();

      // Get custom parameters
      const colorIntensity = parseFloat(
        container.dataset.colorIntensity || "1.0"
      );
      const speed = parseFloat(container.dataset.speed || "1.0");
      const rippleIntensity = parseFloat(
        container.dataset.rippleIntensity || "0.1"
      );

      clock = new THREE.Clock();
      camera = new THREE.Camera();
      camera.position.z = 1;
      scene = new THREE.Scene();
      const geometry = new THREE.PlaneGeometry(2, 2);

      uniforms = {
        u_time: { type: "f", value: 1.0 },
        u_resolution: { type: "v2", value: new THREE.Vector2() },
        u_color_intensity: { type: "f", value: colorIntensity },
        u_speed: { type: "f", value: speed },
        u_ripple_intensity: { type: "f", value: rippleIntensity },
      };

      const vertexShader = `
      varying vec2 vUv;
      void main() {
        gl_Position = vec4(position, 1.0);
        vUv = uv;
      }
    `;

      const fragmentShader = `
      precision highp float;
      uniform vec2 u_resolution;
      uniform float u_time;
      uniform float u_color_intensity;
      uniform float u_speed;
      uniform float u_ripple_intensity;
      varying vec2 vUv;
     
      const float PI = 3.1415926535897932384626433832795;
      
      void coswarp(inout vec3 trip, float warpsScale) {
        float timeScale = u_time * u_speed;
        trip.xyz += warpsScale * .2 * cos(3. * trip.yzx + (timeScale * .25));
        trip.xyz += warpsScale * .1 * cos(11. * trip.yzx + (timeScale * .25));
        trip.xyz += warpsScale * .0 * cos(17. * trip.yzx + (timeScale * .25));
      }

      void uvRipple(inout vec2 uv, float intensity) {
        vec2 p = uv -.5;
        float cLength=length(p);
        uv = uv +(p/cLength)*cos(cLength*15.0-u_time*u_speed)*intensity*u_ripple_intensity;
      } 
      
      void main() {
        vec2 uv = (gl_FragCoord.xy - u_resolution * .5) / u_resolution.yy + 0.5;
        
        float t = u_time * u_speed * .5 + uv.x;
        float t2 = u_time * u_speed * .4 + uv.y;
        uvRipple(uv, 1.0);
        float t3 = u_time * u_speed * .3 + uv.x;
        float t4 = u_time * u_speed * .2 + uv.y;
        
        uv = fract(uv * 6.);
        float t5 = u_time * u_speed * .2 + uv.x;
        float t6 = u_time * u_speed * .3 + uv.y;
        
        vec3 color = vec3(sin(t), cos(t), tan(t)) * u_color_intensity;
        
        coswarp(color, 1.);
        color = mix(color, 1.-color, sin(t2));
        color = mix(color, 1.-color, sin(t3));
        color = mix(color, 1.-color, sin(t4));
        color = mix(color, 1.-color, cos(t5));
        color = mix(color, 1.-color, cos(t6));
        
        coswarp(color, 1.);
        
        color = vec3(step(color.r, .1), step(color.g, .1), step(color.b, .1));
        
        gl_FragColor = vec4(color, 1.0);
      }
    `;

      const material = new THREE.ShaderMaterial({
        uniforms,
        vertexShader,
        fragmentShader,
      });

      const mesh = new THREE.Mesh(geometry, material);
      scene.add(mesh);
      renderer = new THREE.WebGLRenderer();
      renderer.setPixelRatio(window.devicePixelRatio);

      // Set initial size to container size
      renderer.setSize(rect.width, rect.height);
      uniforms.u_resolution.value.x = rect.width;
      uniforms.u_resolution.value.y = rect.height;

      container.appendChild(renderer.domElement);

      // Modify resize behavior to maintain container size
      const resizeObserver = new ResizeObserver((entries) => {
        for (let entry of entries) {
          const { width, height } = entry.contentRect;
          renderer.setSize(width, height);
          uniforms.u_resolution.value.x = width;
          uniforms.u_resolution.value.y = height;
        }
      });

      resizeObserver.observe(container);
    }

    function render() {
      uniforms.u_time.value = clock.getElapsedTime();
      renderer.render(scene, camera);
    }

    function animate() {
      render();
      requestAnimationFrame(animate);
    }
    init();
    animate();
  });
</script>

<style define:vars={{ width, height }}>
  #shader {
    width: var(--width);
    height: var(--height);
    margin: 0;
    padding: 0;
    /* grid-column: 1 / -1; */
    /* grid-row: span 2; */
    position: relative;
  }
  #shader::before {
    content: "";
    position: absolute;
    inset: 0;
    background-color: oklch(from var(--color-4-dark) calc(1 - 0.9) c h / 0.6);
    /* background-image: url("/images/andy-wang.avif"); */
    background-blend-mode: color;
  }

  #shader canvas {
    width: 100% !important;
    height: 100% !important;
  }
</style>
